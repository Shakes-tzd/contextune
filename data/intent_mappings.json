{
  "metadata": {
    "version": "0.8.1",
    "created": "2025-10-25",
    "description": "Contextune command mappings for intent detection",
    "total_commands": 6,
    "documentation": "lib/INTENT_MAPPINGS.md"
  },
  "commands": {
    "/ctx:design": {
      "description": "Design system architecture, APIs, and component interfaces",
      "category": "Architecture & Design",
      "keywords": [
        "design",
        "architect",
        "architecture",
        "plan architecture",
        "structure",
        "api design",
        "system design",
        "component design",
        "design pattern",
        "design system"
      ],
      "examples": [
        "design a caching system",
        "architect the API",
        "design the database schema",
        "plan the system architecture",
        "design component structure",
        "create architecture plan",
        "design the data model",
        "architect the solution"
      ],
      "related_flags": [],
      "auto_personas": [],
      "wave_enabled": false,
      "documentation": "commands/ctx-design.md"
    },
    "/ctx:research": {
      "description": "Fast research using 3 parallel Haiku agents for technical questions and decision-making",
      "category": "Research & Investigation",
      "keywords": [
        "research",
        "investigate",
        "find information",
        "compare",
        "what's the best",
        "which library",
        "which framework",
        "what should i use",
        "look into",
        "evaluate options"
      ],
      "examples": [
        "research best React state libraries",
        "investigate Python async frameworks",
        "compare REST vs GraphQL",
        "what's the best database for authentication",
        "which testing framework should I use",
        "find information about caching strategies",
        "evaluate state management options",
        "compare TypeScript type libraries",
        "research deployment options",
        "investigate authentication solutions"
      ],
      "related_flags": [],
      "auto_personas": [],
      "wave_enabled": false,
      "documentation": "commands/ctx-research.md"
    },
    "/ctx:plan": {
      "description": "Document a development plan for parallel execution",
      "category": "Parallel Development",
      "keywords": [
        "plan parallel",
        "parallel plan",
        "parallel development",
        "parallel execution",
        "plan tasks",
        "organize parallel",
        "parallel strategy",
        "development plan",
        "parallel workflow"
      ],
      "examples": [
        "plan parallel development",
        "create parallel execution plan",
        "plan these tasks for parallel work",
        "organize tasks for parallel execution",
        "plan parallel workflow",
        "create development plan",
        "plan parallel strategy"
      ],
      "related_flags": [],
      "auto_personas": [],
      "wave_enabled": false,
      "documentation": "commands/ctx-plan.md"
    },
    "/ctx:execute": {
      "description": "Execute plan in parallel using git worktrees and multiple Claude sessions",
      "category": "Parallel Development",
      "keywords": [
        "parallel execute",
        "execute parallel",
        "parallelize",
        "run parallel",
        "work parallel",
        "parallel tasks",
        "spawn agents",
        "parallel work",
        "worktrees",
        "parallel development"
      ],
      "examples": [
        "execute parallel development",
        "work on these in parallel",
        "parallelize this work",
        "run these tasks in parallel",
        "execute parallel plan",
        "work on multiple tasks simultaneously",
        "spawn agents for parallel work",
        "run parallel execution"
      ],
      "related_flags": [],
      "auto_personas": [],
      "wave_enabled": true,
      "documentation": "commands/ctx-execute.md"
    },
    "/ctx:status": {
      "description": "Check status of parallel worktrees and tasks",
      "category": "Parallel Development",
      "keywords": [
        "parallel status",
        "check parallel",
        "parallel progress",
        "worktree status",
        "parallel tasks status",
        "monitor parallel",
        "parallel check",
        "show parallel"
      ],
      "examples": [
        "check parallel status",
        "show parallel progress",
        "parallel status",
        "what's the status of parallel tasks",
        "check parallel worktrees",
        "monitor parallel execution",
        "show parallel development status"
      ],
      "related_flags": [],
      "auto_personas": [],
      "wave_enabled": false,
      "documentation": "commands/ctx-status.md"
    },
    "/ctx:cleanup": {
      "description": "Clean up completed worktrees and branches",
      "category": "Parallel Development",
      "keywords": [
        "parallel cleanup",
        "clean parallel",
        "cleanup worktrees",
        "remove worktrees",
        "cleanup parallel",
        "clean worktrees",
        "parallel clean"
      ],
      "examples": [
        "cleanup parallel worktrees",
        "clean up parallel execution",
        "remove completed worktrees",
        "cleanup parallel work",
        "clean parallel tasks",
        "remove parallel branches"
      ],
      "related_flags": [],
      "auto_personas": [],
      "wave_enabled": false,
      "documentation": "commands/ctx-cleanup.md"
    }
  },
  "aliases": {},
  "natural_language_patterns": {
    "question_words": ["what", "how", "why", "when", "where", "can you", "could you", "would you"],
    "imperative_verbs": ["design", "research", "plan", "execute", "check", "cleanup"],
    "action_indicators": ["design", "research", "plan", "execute", "parallelize", "monitor", "cleanup"]
  },
  "context_triggers": {
    "architecture_keywords": ["design", "architect", "architecture", "structure", "pattern", "system"],
    "research_keywords": ["research", "investigate", "compare", "evaluate", "find", "which", "best"],
    "parallel_keywords": ["parallel", "worktree", "concurrent", "multiple", "spawn", "execute"]
  },
  "confidence_scoring": {
    "exact_keyword_match": 1.0,
    "partial_keyword_match": 0.7,
    "context_match": 0.5,
    "example_similarity": 0.8,
    "multi_keyword_match_bonus": 0.2
  }
}
